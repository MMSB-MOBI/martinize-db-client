import React from 'react';
import { Button, Typography } from '@material-ui/core';

export default function AddMoleculeFileInput(props: { 
  onChange: (files: { itp: File[], pdb: File | undefined }) => void,
}) {
  const [fileInputs, setFileInputs] = React.useState([[String(Math.random()), null]] as [string, File | null][]);
  const [pdbInput, setPdbInput] = React.useState<File>();

  function addInput() {
    const id = String(Math.random());
    setFileInputs([...fileInputs, [id, null]]);
  }

  function removeInput(id: string) {
    const filtered = fileInputs.filter(e => e[0] !== id);
    setFileInputs(filtered);

    props.onChange({
      itp: filtered.map(e => e[1]).filter(e => !!e) as File[],
      pdb: pdbInput,
    });
  }

  function changeInput(id: string, file?: File) {
    const selected = fileInputs.findIndex(f => f[0] === id);

    if (selected === -1) {
      throw new Error("This message should not appear");
    }

    const a = [...fileInputs];
    
    a[selected][1] = file ?? null;

    setFileInputs(a);

    props.onChange({
      itp: a.map(e => e[1]).filter(e => !!e) as File[],
      pdb: pdbInput,
    });
  }

  function onPdbChange(file?: File) {
    setPdbInput(file);

    props.onChange({
      itp: fileInputs.map(e => e[1]).filter(e => !!e) as File[],
      pdb: file,
    });
  }

  return (
    <div>
      {/* Single PDB file input */}
      <Typography gutterBottom>
        PDB file generated by Martinize
      </Typography>
      <div>
        <FileInput has={pdbInput ? pdbInput.name : ""} onFileChange={onPdbChange} />
      </div>

      <Typography gutterBottom>
        Generated ITP files
      </Typography>
      <div>
        {fileInputs.map((f, i) => <FileInput 
          has={f[1] ? f[1].name : ""}
          onFileChange={file => changeInput(f[0], file)}
          onRemove={i !== 0 ? () => removeInput(f[0]) : undefined}
          key={f[0]}
        />)}
      </div>
      <Button color="primary" onClick={addInput}>
        Add another ITP file
      </Button>
    </div>
  )
}

function FileInput(props: { has?: string, onFileChange: (file?: File) => void, onRemove?: () => void, }) {
  const inputRef = React.createRef<HTMLInputElement>();

  function click() {
    inputRef.current!.click();
  }

  return (
    <div style={{ display: 'flex', alignItems: 'center', marginBottom: 10 }}>
      {props.onRemove && <Button color="secondary" onClick={props.onRemove} style={{ marginRight: 10 }}>
        Remove
      </Button>}

      <Button color="primary" onClick={click} style={{ marginRight: 10 }}>
        {props.has ? "Change " : "Add "} file
      </Button>

      <Typography variant="body2">
        {props.has || "Select a file..."}
      </Typography>

      <input type="file" ref={inputRef} style={{ display: 'none' }} onChange={e => {
        const input = e.target;

        if (input.files && input.files[0]) {
          props.onFileChange(input.files[0]);
        }
        else {
          props.onFileChange();
        }
      }} />
    </div>
  );
}
